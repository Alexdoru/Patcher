// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url 'https://jitpack.io' }
        maven {
            url = "https://repo.sk1er.club/repository/maven-public"
        }

        flatDir dirs: 'libs'
    }

    dependencies {
        classpath('com.github.ReplayMod:ForgeGradle:dcfe5a56:all')
    }
}


repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'maven-publish'

version = this.properties.getOrDefault("BUILD_ID", "LOCAL")
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    mappings = "stable_22"
    runDir = "run"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=club.sk1er.patcher.tweaker.PatcherTweaker,club.sk1er.patcher.tweaker.other.ModTweaker"]
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    def kotlin_version = "1.3.72"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        exclude module: "kotlin-stdlib"
    }

    embed("net.modcore:Loader:2.0.0")
    implementation("net.modcore:ModCore:803-${mcVersion}-SNAPSHOT") {
        exclude module: 'WaifUPnP'
    }

    embed("com.github.Sk1erLLC:HookInjection:b9ac92c31e") {
        exclude module: "koffee"
        exclude module: "kotlin-reflect"
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "asm-debug-all"
    }
    embed 'com.github.ben-manes.caffeine:caffeine:2.8.8'

    implementation('com.github.half-cambodian-hacker-man:Koffee:d8cee73') {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'asm'
    }

    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7') {
        exclude module: "kotlin-stdlib-common"
        exclude module: "kotlin-stdlib"
    }
}

task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn processResources
classes.dependsOn moveResources

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    exclude "META-INF/**"
    copy {
        from("src/main/resources")
        into("build/classes/main")
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    dependsOn configurations.compile
    from({
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }

    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    manifest {
        attributes "FMLCorePlugin": "club.sk1er.patcher.tweaker.PatcherTweaker",
                "ModSide": "CLIENT",
                'FMLAT': 'patcher_at.cfg',
                "FMLCorePluginContainsFMLMod": "Yes, yes it does",
                "Main-Class": "club.sk1er.container.ContainerMessage",
                "TweakClass": "club.sk1er.patcher.tweaker.launch.PatcherTweak",
                "TweakOrder": "0"
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn', '-Xno-param-assertions']
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "Patcher"
            def mcVersion
            def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
            mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
            version = "${this.properties.getOrDefault("branch", "master") != "master" ? this.properties.getOrDefault("branch", "master") + "-" : ""}${project.version}-$mcVersion${this.properties.getOrDefault("IS_CI", false) ? "-SNAPSHOT" : ""}"

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != "forge" && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact jar
        }
    }

    repositories {
        maven {
            name 'nexus'
            url "https://repo.sk1er.club/repository/maven-private-${this.properties.getOrDefault("IS_CI", false) ? "snapshots" : "releases"}/"

            credentials {
                username project.nexus_user
                password project.nexus_password
            }
        }
    }
}
